// Generated by CoffeeScript 1.6.1
var PerspectoStore, actions, fulmicoton,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

actions = require('./actions.coffee');

fulmicoton = require('./fulmicoton.coffee');

PerspectoStore = (function(_super) {

  __extends(PerspectoStore, _super);

  function PerspectoStore() {
    return PerspectoStore.__super__.constructor.apply(this, arguments);
  }

  PerspectoStore.prototype.events = function() {
    return ["change"];
  };

  PerspectoStore.prototype.bindActions = function() {
    var _this = this;
    return actions.newline.bind(function(line) {
      return _this.onNewLine(line);
    });
  };

  PerspectoStore.prototype.init = function() {
    this.lines = [
      {
        'points': [[1, 1, 1], [-1, 1, 1]],
        'side': 'l'
      }, {
        'points': [[1, 1, 1], [1, -1, 1]],
        'side': 'l'
      }, {
        'points': [[1, 1, 1], [1, 1, -1]],
        'side': 'l'
      }, {
        'points': [[-1, -1, -1], [-1, 1, -1]],
        'side': 'l'
      }, {
        'points': [[-1, -1, -1], [1, -1, -1]],
        'side': 'l'
      }, {
        'points': [[-1, -1, -1], [-1, -1, 1]],
        'side': 'l'
      }, {
        'points': [[-1, 1, 1], [-1, 1, -1]],
        'side': 'l'
      }, {
        'points': [[-1, 1, 1], [-1, -1, 1]],
        'side': 'l'
      }, {
        'points': [[1, -1, 1], [1, -1, -1]],
        'side': 'l'
      }, {
        'points': [[1, -1, 1], [-1, -1, 1]],
        'side': 'l'
      }, {
        'points': [[1, 1, -1], [1, -1, -1]],
        'side': 'l'
      }, {
        'points': [[1, 1, -1], [-1, 1, -1]],
        'side': 'l'
      }
    ];
    return this.incompleteLines = [];
  };

  PerspectoStore.prototype.getLines = function() {
    return this.lines;
  };

  PerspectoStore.prototype.getIncompleteLines = function() {
    return this.incompleteLines;
  };

  PerspectoStore.prototype.onNewLine = function(line) {
    this.incompleteLines.push(line);
    return this.events.change.trigger();
  };

  return PerspectoStore;

})(fulmicoton.Store);

module.exports = new PerspectoStore();
