// Generated by CoffeeScript 1.6.1
var Camera, Coordinates, Line, Vec;

Vec = (function() {

  function Vec(vals) {
    this.vals = vals;
    this.dim = this.vals.length;
  }

  Vec.prototype.diff = function(other) {
    var i;
    return new Vec((function() {
      var _i, _ref, _results;
      _results = [];
      for (i = _i = 0, _ref = this.dim; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        _results.push(this.vals[i] - other.vals[i]);
      }
      return _results;
    }).call(this));
  };

  Vec.prototype.add = function(other) {
    var i;
    return new Vec((function() {
      var _i, _ref, _results;
      _results = [];
      for (i = _i = 0, _ref = this.dim; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        _results.push(this.vals[i] + other.vals[i]);
      }
      return _results;
    }).call(this));
  };

  Vec.prototype.scale = function(l) {
    var i;
    return new Vec((function() {
      var _i, _ref, _results;
      _results = [];
      for (i = _i = 0, _ref = this.dim; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        _results.push(this.vals[i] * l);
      }
      return _results;
    }).call(this));
  };

  Vec.prototype.norm = function() {
    return Math.sqrt(this.dot(this));
  };

  Vec.prototype.normalize = function() {
    return this.scale(1.0 / this.norm());
  };

  Vec.prototype.dot = function(other) {
    var i, res, _i, _ref;
    res = 0;
    for (i = _i = 0, _ref = this.dim; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
      res += this.vals[i] * other.vals[i];
    }
    return res;
  };

  Vec.prototype.prod = function(other) {
    var xa, xb, ya, yb, za, zb, _ref, _ref1;
    _ref = this.vals, xa = _ref[0], ya = _ref[1], za = _ref[2];
    _ref1 = other.vals, xb = _ref1[0], yb = _ref1[1], zb = _ref1[2];
    return new Vec([ya * zb - yb * za, za * xb - zb * xa, xa * yb - ya * xa]);
  };

  return Vec;

})();

Camera = (function() {

  function Camera(O) {
    var down;
    this.O = O;
    this.n = this.O.scale(-1.0).normalize();
    down = new Vec([0, 0, 1]);
    this.y_axis = down.diff(this.n.scale(this.n.dot(down))).normalize();
    this.x_axis = this.y_axis.prod(this.n);
  }

  Camera.prototype.projection = function(A) {
    var OA, d, v;
    OA = A.diff(this.O);
    d = this.n.dot(OA);
    v = (OA.diff(this.n.scale(d))).scale(1.0 / d);
    return new Vec([v.dot(this.x_axis), v.dot(this.y_axis)]);
  };

  Camera.prototype.projectLine = function(line) {
    var P_, Q_, n_;
    P_ = this.projection(line.P);
    Q_ = this.projection(line.getPoint());
    n_ = Q_.diff(P_).normalize();
    return new Line(P_, n_);
  };

  Camera.prototype.antiprojection = function(A) {
    var n;
    n = this.n.add(this.x_axis.scale(A.vals[0])).add(this.y_axis.scale(A.vals[1])).normalize();
    return new Line(this.O, n);
  };

  return Camera;

})();

Line = (function() {

  function Line(P, n) {
    this.P = P;
    this.n = n;
  }

  Line.prototype.getPoint = function(param) {
    if (param == null) {
      param = 1.0;
    }
    return this.P.add(this.n.scale(param));
  };

  return Line;

})();

Coordinates = (function() {

  function Coordinates(offset, scale) {
    this.offset = offset;
    this.scale = scale;
    this.invScale = 1.0 / this.scale;
  }

  Coordinates.prototype.to = function(v) {
    return v.scale(this.scale).add(this.offset);
  };

  Coordinates.prototype.from = function(v) {
    return v.diff(this.offset).scale(this.invScale);
  };

  return Coordinates;

})();

module.exports = {
  Camera: Camera,
  Vec: Vec,
  Coordinates: Coordinates
};
