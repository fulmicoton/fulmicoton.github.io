// Generated by CoffeeScript 1.6.1
var Event, EventCaster, Store, actions, removeEl,
  __slice = [].slice,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

removeEl = function(arr, el, n) {
  var elId, nbOcc;
  if (n == null) {
    n = 1;
  }
  nbOcc = n;
  while (nbOcc !== 0) {
    elId = arr.indexOf(el);
    if (elId !== -1) {
      arr.splice(elId, 1);
      nbOcc -= 1;
    } else {
      return n - nbOcc;
    }
  }
  return n;
};

Event = (function() {

  function Event(action_name) {
    this.action_name = action_name;
    this.__listeners = [];
  }

  Event.prototype.trigger = function() {
    var args, callback, _i, _len, _ref, _results;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    this.__listeners = this.__listeners.slice(0);
    _ref = this.__listeners;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      callback = _ref[_i];
      _results.push(callback.apply(null, args));
    }
    return _results;
  };

  Event.prototype.bind = function(callback) {
    return this.__listeners.push(callback);
  };

  Event.prototype.unbind = function(evtName, callback) {
    var callbackIdx;
    if (callback != null) {
      callbackIdx = callbacks.indexOf(callback);
      if (callbacks.length === 0) {
        delete this.__listeners[evtName];
      }
    } else {
      this.__listeners = [];
    }
    return this;
  };

  return Event;

})();

EventCaster = (function() {

  function EventCaster() {
    this.__listeners = {};
  }

  EventCaster.prototype.createAction = function(evtName) {
    var action;
    action = this.__listeners[evtName];
    if (action != null) {
      return void 0;
    } else {
      action = new Event(evtName);
      this.__listeners[evtName] = action;
      return action;
    }
  };

  EventCaster.prototype.trigger = function() {
    var args, evtName, listeners;
    evtName = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    listeners = this.__listeners[evtName];
    if (listeners != null) {
      return listeners.trigger.apply(listeners, args);
    }
  };

  EventCaster.prototype.bind = function(evtName, callback) {
    var action;
    action = this.__listeners[evtName];
    if (action == null) {
      action = this.createAction(evtName);
    }
    return action.bind(callback);
  };

  EventCaster.prototype.unbind = function(evtName, callback) {
    var action;
    action = this.__listeners[evtName];
    if (action != null) {
      action.unbind(callback);
    }
    return this;
  };

  return EventCaster;

})();

Store = (function(_super) {

  __extends(Store, _super);

  function Store() {
    var event_name, event_names, _i, _len;
    Store.__super__.constructor.call(this);
    if (this.init != null) {
      this.init();
    }
    if (this.bindActions) {
      this.bindActions();
    }
    event_names = [];
    if (this.events != null) {
      event_names = this.events();
    }
    this.events = {};
    for (_i = 0, _len = event_names.length; _i < _len; _i++) {
      event_name = event_names[_i];
      this.events[event_name] = new Event(event_name);
    }
  }

  return Store;

})(EventCaster);

actions = function(actions) {
  var action, action_name, res, _i, _len;
  res = {};
  for (_i = 0, _len = actions.length; _i < _len; _i++) {
    action_name = actions[_i];
    action = new Event(action_name);
    if (action != null) {
      res[action_name] = action;
    } else {
      console.error("Defined the action " + action_name + "twice");
    }
  }
  return res;
};

module.exports = {
  Store: Store,
  Event: Event,
  EventCaster: EventCaster,
  Store: Store,
  actions: actions
};
